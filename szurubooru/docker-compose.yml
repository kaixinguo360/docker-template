version: "3.8"

x-logging: &loki-logging
    driver: loki
    options:
      loki-url: "${DEPLOY_LOKI_URL}"
      loki-retries: 5
      loki-batch-size: 400

services:
  server:
    image: ${DEPLOY_IMAGE_SERVER:-szurubooru/server:2.5}
#:log |    logging: *loki-logging
#:env |    env_file: ${DEPLOY_ENV_SERVER}
    environment:
      ## These should be the names of the dependent containers listed below,
      ## or FQDNs/IP addresses if these services are running outside of Docker
      POSTGRES_HOST: db
      ## Credentials for database:
      POSTGRES_USER: szurubooru
      POSTGRES_PASSWORD: szurubooru
      ## Commented Values are Default:
      #POSTGRES_DB: defaults to same as POSTGRES_USER
      #POSTGRES_PORT: 5432
      #LOG_SQL: 0 (1 for verbose SQL logs)
    networks:
      internal_network:
      external_network:
        aliases:
          - ${DEPLOY_STACK_NAME:-szurubooru}_server
    configs:
      - source: szurubooru-config
        target: /opt/app/config.yaml
    volumes:
      - data:/data
#:media |      - media:/media
#:rclone|      - rclone:$DEPLOY_RCLONE_MOUNT
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_SERVER:-node.labels.ignore != true}

  client:
    image: ${DEPLOY_IMAGE_CLIENT:-szurubooru/client:2.5}
#:log |    logging: *loki-logging
#:env |    env_file: ${DEPLOY_ENV_CLIENT}
#:port|    ports:
#:port|      - ${DEPLOY_PORT_CLIENT:-80}:80
    environment:
      BACKEND_HOST: ${DEPLOY_STACK_NAME:-szurubooru}_server
      BASE_URL:
    networks:
      - internal_network
      - external_network
    configs:
      - source: szurubooru-config
        target: /opt/app/config.yaml
    volumes:
      - data:/data:ro
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_CLIENT:-node.labels.ignore != true}
      labels:
        - "traefik.enable=true" #!no-proxy
        - "traefik.http.routers.${DEPLOY_STACK_NAME:-szurubooru}.rule=Host(`${DEPLOY_SUBDOMAIN:-szurubooru}.${DEPLOY_HOSTNAME}`)"
        - "traefik.http.routers.${DEPLOY_STACK_NAME:-szurubooru}.entrypoints=webhttps"
#:client-ssl|        - "traefik.http.routers.${DEPLOY_STACK_NAME:-szurubooru}.tls.options=sslVerifyClient@file"
        - "traefik.http.routers.${DEPLOY_STACK_NAME:-szurubooru}.tls.certresolver=le"
        - "traefik.http.services.${DEPLOY_STACK_NAME:-szurubooru}.loadbalancer.server.port=80"

  db:
    image: ${DEPLOY_IMAGE_DB:-postgres:12.2-alpine}
    environment:
      - POSTGRES_DB=szurubooru
      - POSTGRES_USER=szurubooru
      - POSTGRES_PASSWORD=szurubooru
    networks:
      - internal_network
    volumes:
      - db:/var/lib/postgresql/data
    deploy:
      replicas: 1
      placement:
        constraints: 
          - ${DEPLOY_NODE_DB:-node.labels.ignore != true}

networks:
  internal_network:
   internal: true
  external_network:
    external: true

configs:
  szurubooru-config:
    file: ${DEPLOY_CONFIG_SZURUBOORU:-config/config.yaml}
    template_driver: golang

volumes:
  data:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_DATA_HOST,nolock,soft,rw"
      device: ":$DEPLOY_DATA_ROOT/${DEPLOY_STACK_NAME:-szurubooru}/data"
  db:
    driver_opts:
      type: "nfs"
      o: "addr=$DEPLOY_DATA_HOST,nolock,soft,rw"
      device: ":$DEPLOY_DATA_ROOT/${DEPLOY_STACK_NAME:-szurubooru}/db"
#:media |  media:
#:media |    driver_opts:
#:media |      type: "nfs"
#:media |      o: "addr=$DEPLOY_MEDIA_HOST,nolock,soft,rw"
#:media |      device: ":$DEPLOY_MEDIA_ROOT"
#:rclone|  rclone:
#:rclone|    driver: "rclone"
#:rclone|    driver_opts:
#:rclone|      remote: "$DEPLOY_RCLONE_REMOTE"
